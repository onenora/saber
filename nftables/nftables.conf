#! /usr/sbin/nft -f  # 指定该脚本使用 nftables 解析器
# clean
flush ruleset  # 清空当前 nftables 规则集，防止冲突

table inet filter {  # 创建一个名为 filter 的表，适用于 IPv4 和 IPv6

	map input_vmap {  # 创建一个映射表 input_vmap，根据协议类型跳转到不同的链
		type inet_proto : verdict  # 该映射表的键类型是协议（inet_proto），值类型是判决（verdict）
		elements = { tcp : jump TCP, udp : jump UDP }  # TCP 流量跳转到 TCP 规则链，UDP 流量跳转到 UDP 规则链
	}

	set web {  # 创建一个名为 web 的端口集合
		type inet_service  # 该集合的类型是 inet_service（表示 TCP/UDP 端口）
		flags interval  # 允许定义连续端口范围
		elements = { 80 }  # 该集合包含 HTTP 端口 80
	}

	set xray {  # 创建一个名为 xray 的端口集合
		type inet_service  # 该集合的类型是 inet_service（表示 TCP/UDP 端口）
		flags interval  # 允许定义连续端口范围
		elements = { 443, 8443, 8000 }  # 该集合包含 HTTPS 端口 443 和其他端口
	}

	chain input {  # 创建名为 input 的链，用于处理入站流量
		type filter hook input priority filter; policy drop;  # 该链用于 input 钩子，优先级为 filter，默认策略为 drop（拒绝所有未匹配规则的流量）

		# 允许 lo（本地回环接口）的所有流量
		iif "lo" accept comment "Accept any localhost traffic"  

		# 如果目标地址是 127.0.0.0/8，但流量不是来自 lo（本地回环），则丢弃（防止伪造的回环流量）
		iif != "lo" ip daddr 127.0.0.0/8 counter packets 0 bytes 0 drop comment "drop connections to loopback not coming from loopback"  

		# 丢弃无效状态的连接，并记录日志
		ct state invalid log prefix "Invalid-Input: " level info flags all counter packets 110 bytes 7128 drop comment "Drop invalid connections"  

		# 限制 ping 请求速率，以防止 ICMP 泛洪攻击
		icmp type echo-request limit rate 20 bytes/second burst 500 bytes counter packets 17 bytes 2040 accept comment "No ping floods"  
		
		# 丢弃所有超限的 ping 请求
		icmp type echo-request drop comment "No ping floods"  

		# 允许所有已经建立或相关的连接（如返回数据）
		ct state { established, related } counter packets 173172 bytes 99905881 accept comment "Accept traffic originated from us"  

		# 允许必要的 ICMP 报文，如目的地不可达、超时等
		icmp type { destination-unreachable, router-advertisement, router-solicitation, time-exceeded, parameter-problem } accept comment "Accept ICMP"  

		# 允许 IGMP（用于组播）
		ip protocol igmp accept comment "Accept IGMP"  
        
		# 允许 shadow-tls 网络的 IPv4 流量
		ip saddr 10.89.0.0/24 ip daddr 10.89.0.0/24 accept comment "Allow internal traffic for shadow-tls network"
		
		# 允许 shadow-tls 网络的 IPv6 流量
		ip6 saddr fd4c:e4a6:dd64:762c::/64 ip6 daddr fd4c:e4a6:dd64:762c::/64 accept comment "Allow internal IPv6 traffic for shadow-tls network"
		
        # 根据协议类型使用 input_vmap 进行跳转
        meta l4proto vmap @input_vmap  
	}

	chain forward {  # 创建 forward 链，用于处理转发流量
		type filter hook forward priority filter; policy accept;  # 默认策略是 accept，允许所有流量
		# 允许 shadow-tls 网络内部的容器间通信
		ip saddr 10.89.0.0/24 ip daddr 10.89.0.0/24 accept comment "Allow shadow-tls container-to-container traffic"
		ip6 saddr fd4c:e4a6:dd64:762c::/64 ip6 daddr fd4c:e4a6:dd64:762c::/64 accept comment "Allow shadow-tls container-to-container IPv6 traffic"
	}

	chain output {  # 创建 output 链，用于处理出站流量
		type filter hook output priority filter; policy accept;  # 默认策略是 accept，允许所有流量
	}

	chain TCP {  # 创建 TCP 规则链
		# 允许 SSH（端口 22）的新连接，但限制每分钟最多 15 次，以防止暴力破解攻击
		tcp dport 22 ct state new limit rate 15/minute log prefix "New SSH connection: " counter packets 16 bytes 960 accept comment "Avoid brute force on SSH"  

		# 允许 web 端口（80）的 TCP 连接
		tcp dport @web counter packets 0 bytes 0 accept comment "Accept web server"  

		# 允许 xray 端口（443、8443、8000）的 TCP 连接
		tcp dport @xray counter packets 0 bytes 0 accept comment "Accept xray"  

		# 拒绝所有其他 TCP 连接，并发送 TCP RST 响应
		counter packets 0 bytes 0 reject with tcp reset comment "Reject all other TCP traffic"  
	}

	chain UDP {  # 创建 UDP 规则链
		# 允许 xray 端口（443、8443、8000）的 UDP 连接
		udp dport @xray counter packets 0 bytes 0 accept comment "Accept xray"  

		# 拒绝所有其他 UDP 连接
		counter packets 0 bytes 0 reject comment "Reject all other UDP traffic"  
	}
}
